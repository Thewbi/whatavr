// Generated from ../../src/parser/assembler.g4 by ANTLR 4.8
#![allow(dead_code)]
#![allow(nonstandard_style)]
#![allow(unused_imports)]
#![allow(unused_variables)]
use antlr_rust::atn::ATN;
use antlr_rust::char_stream::CharStream;
use antlr_rust::int_stream::IntStream;
use antlr_rust::lexer::{BaseLexer, Lexer, LexerRecog};
use antlr_rust::atn_deserializer::ATNDeserializer;
use antlr_rust::dfa::DFA;
use antlr_rust::lexer_atn_simulator::{LexerATNSimulator, ILexerATNSimulator};
use antlr_rust::PredictionContextCache;
use antlr_rust::recognizer::{Recognizer,Actions};
use antlr_rust::error_listener::ErrorListener;
use antlr_rust::TokenSource;
use antlr_rust::token_factory::{TokenFactory,CommonTokenFactory,TokenAware};
use antlr_rust::token::*;
use antlr_rust::rule_context::{BaseRuleContext,EmptyCustomRuleContext,EmptyContext};
use antlr_rust::parser_rule_context::{ParserRuleContext,BaseParserRuleContext,cast};
use antlr_rust::vocabulary::{Vocabulary,VocabularyImpl};

use antlr_rust::{lazy_static,Tid,TidAble,TidExt};

use std::sync::Arc;
use std::cell::RefCell;
use std::rc::Rc;
use std::marker::PhantomData;
use std::ops::{Deref, DerefMut};


	pub const LDI:isize=1; 
	pub const OPENING_BRACKET:isize=2; 
	pub const CLOSEING_BRACKET:isize=3; 
	pub const COLON:isize=4; 
	pub const COMMA:isize=5; 
	pub const WS:isize=6; 
	pub const NUMBER:isize=7; 
	pub const IDENTIFIER:isize=8;
	pub const channelNames: [&'static str;0+2] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	];

	pub const modeNames: [&'static str;1] = [
		"DEFAULT_MODE"
	];

	pub const ruleNames: [&'static str;34] = [
		"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", 
		"O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "LDI", "OPENING_BRACKET", 
		"CLOSEING_BRACKET", "COLON", "COMMA", "WS", "NUMBER", "IDENTIFIER"
	];


	pub const _LITERAL_NAMES: [Option<&'static str>;6] = [
		None, None, Some("'('"), Some("')'"), Some("':'"), Some("','")
	];
	pub const _SYMBOLIC_NAMES: [Option<&'static str>;9]  = [
		None, Some("LDI"), Some("OPENING_BRACKET"), Some("CLOSEING_BRACKET"), 
		Some("COLON"), Some("COMMA"), Some("WS"), Some("NUMBER"), Some("IDENTIFIER")
	];
	lazy_static!{
	    static ref _shared_context_cache: Arc<PredictionContextCache> = Arc::new(PredictionContextCache::new());
		static ref VOCABULARY: Box<dyn Vocabulary> = Box::new(VocabularyImpl::new(_LITERAL_NAMES.iter(), _SYMBOLIC_NAMES.iter(), None));
	}


pub type LexerContext<'input> = BaseRuleContext<'input,EmptyCustomRuleContext<'input,LocalTokenFactory<'input> >>;

pub type LocalTokenFactory<'input> = antlr_rust::token_factory::ArenaCommonFactory<'input>;

type From<'a> = <LocalTokenFactory<'a> as TokenFactory<'a> >::From;

pub struct assemblerLexer<'input, Input:CharStream<From<'input> >> {
	base: BaseLexer<'input,assemblerLexerActions,Input,LocalTokenFactory<'input>>,
}

antlr_rust::tid! { impl<'input,Input> TidAble<'input> for assemblerLexer<'input,Input> where Input:CharStream<From<'input> > }

impl<'input, Input:CharStream<From<'input> >> Deref for assemblerLexer<'input,Input>{
	type Target = BaseLexer<'input,assemblerLexerActions,Input,LocalTokenFactory<'input>>;

	fn deref(&self) -> &Self::Target {
		&self.base
	}
}

impl<'input, Input:CharStream<From<'input> >> DerefMut for assemblerLexer<'input,Input>{
	fn deref_mut(&mut self) -> &mut Self::Target {
		&mut self.base
	}
}


impl<'input, Input:CharStream<From<'input> >> assemblerLexer<'input,Input>{
    fn get_rule_names(&self) -> &'static [&'static str] {
        &ruleNames
    }
    fn get_literal_names(&self) -> &[Option<&str>] {
        &_LITERAL_NAMES
    }

    fn get_symbolic_names(&self) -> &[Option<&str>] {
        &_SYMBOLIC_NAMES
    }

    fn get_grammar_file_name(&self) -> &'static str {
        "assemblerLexer.g4"
    }

	pub fn new_with_token_factory(input: Input, tf: &'input LocalTokenFactory<'input>) -> Self {
		antlr_rust::recognizer::check_version("0","3");
    	Self {
			base: BaseLexer::new_base_lexer(
				input,
				LexerATNSimulator::new_lexer_atnsimulator(
					_ATN.clone(),
					_decision_to_DFA.clone(),
					_shared_context_cache.clone(),
				),
				assemblerLexerActions{},
				tf
			)
	    }
	}
}

impl<'input, Input:CharStream<From<'input> >> assemblerLexer<'input,Input> where &'input LocalTokenFactory<'input>:Default{
	pub fn new(input: Input) -> Self{
		assemblerLexer::new_with_token_factory(input, <&LocalTokenFactory<'input> as Default>::default())
	}
}

pub struct assemblerLexerActions {
}

impl assemblerLexerActions{
}

impl<'input, Input:CharStream<From<'input> >> Actions<'input,BaseLexer<'input,assemblerLexerActions,Input,LocalTokenFactory<'input>>> for assemblerLexerActions{
	}

	impl<'input, Input:CharStream<From<'input> >> assemblerLexer<'input,Input>{

}

impl<'input, Input:CharStream<From<'input> >> LexerRecog<'input,BaseLexer<'input,assemblerLexerActions,Input,LocalTokenFactory<'input>>> for assemblerLexerActions{
}
impl<'input> TokenAware<'input> for assemblerLexerActions{
	type TF = LocalTokenFactory<'input>;
}

impl<'input, Input:CharStream<From<'input> >> TokenSource<'input> for assemblerLexer<'input,Input>{
	type TF = LocalTokenFactory<'input>;

    fn next_token(&mut self) -> <Self::TF as TokenFactory<'input>>::Tok {
        self.base.next_token()
    }

    fn get_line(&self) -> isize {
        self.base.get_line()
    }

    fn get_char_position_in_line(&self) -> isize {
        self.base.get_char_position_in_line()
    }

    fn get_input_stream(&mut self) -> Option<&mut dyn IntStream> {
        self.base.get_input_stream()
    }

	fn get_source_name(&self) -> String {
		self.base.get_source_name()
	}

    fn get_token_factory(&self) -> &'input Self::TF {
        self.base.get_token_factory()
    }
}



	lazy_static! {
	    static ref _ATN: Arc<ATN> =
	        Arc::new(ATNDeserializer::new(None).deserialize(_serializedATN.chars()));
	    static ref _decision_to_DFA: Arc<Vec<antlr_rust::RwLock<DFA>>> = {
	        let mut dfa = Vec::new();
	        let size = _ATN.decision_to_state.len();
	        for i in 0..size {
	            dfa.push(DFA::new(
	                _ATN.clone(),
	                _ATN.get_decision_state(i),
	                i as isize,
	            ).into())
	        }
	        Arc::new(dfa)
	    };
	}



	const _serializedATN:&'static str =
		"\x03\u{608b}\u{a72a}\u{8133}\u{b9ed}\u{417c}\u{3be7}\u{7786}\u{5964}\x02\
		\x0a\u{99}\x08\x01\x04\x02\x09\x02\x04\x03\x09\x03\x04\x04\x09\x04\x04\
		\x05\x09\x05\x04\x06\x09\x06\x04\x07\x09\x07\x04\x08\x09\x08\x04\x09\x09\
		\x09\x04\x0a\x09\x0a\x04\x0b\x09\x0b\x04\x0c\x09\x0c\x04\x0d\x09\x0d\x04\
		\x0e\x09\x0e\x04\x0f\x09\x0f\x04\x10\x09\x10\x04\x11\x09\x11\x04\x12\x09\
		\x12\x04\x13\x09\x13\x04\x14\x09\x14\x04\x15\x09\x15\x04\x16\x09\x16\x04\
		\x17\x09\x17\x04\x18\x09\x18\x04\x19\x09\x19\x04\x1a\x09\x1a\x04\x1b\x09\
		\x1b\x04\x1c\x09\x1c\x04\x1d\x09\x1d\x04\x1e\x09\x1e\x04\x1f\x09\x1f\x04\
		\x20\x09\x20\x04\x21\x09\x21\x04\x22\x09\x22\x04\x23\x09\x23\x03\x02\x03\
		\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\
		\x07\x03\x07\x03\x08\x03\x08\x03\x09\x03\x09\x03\x0a\x03\x0a\x03\x0b\x03\
		\x0b\x03\x0c\x03\x0c\x03\x0d\x03\x0d\x03\x0e\x03\x0e\x03\x0f\x03\x0f\x03\
		\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\
		\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\
		\x19\x03\x19\x03\x1a\x03\x1a\x03\x1b\x03\x1b\x03\x1c\x03\x1c\x03\x1c\x03\
		\x1c\x03\x1d\x03\x1d\x03\x1e\x03\x1e\x03\x1f\x03\x1f\x03\x20\x03\x20\x03\
		\x21\x06\x21\u{89}\x0a\x21\x0d\x21\x0e\x21\u{8a}\x03\x21\x03\x21\x03\x22\
		\x06\x22\u{90}\x0a\x22\x0d\x22\x0e\x22\u{91}\x03\x23\x03\x23\x06\x23\u{96}\
		\x0a\x23\x0d\x23\x0e\x23\u{97}\x02\x02\x24\x03\x02\x05\x02\x07\x02\x09\
		\x02\x0b\x02\x0d\x02\x0f\x02\x11\x02\x13\x02\x15\x02\x17\x02\x19\x02\x1b\
		\x02\x1d\x02\x1f\x02\x21\x02\x23\x02\x25\x02\x27\x02\x29\x02\x2b\x02\x2d\
		\x02\x2f\x02\x31\x02\x33\x02\x35\x02\x37\x03\x39\x04\x3b\x05\x3d\x06\x3f\
		\x07\x41\x08\x43\x09\x45\x0a\x03\x02\x20\x04\x02\x43\x43\x63\x63\x04\x02\
		\x44\x44\x64\x64\x04\x02\x45\x45\x65\x65\x04\x02\x46\x46\x66\x66\x04\x02\
		\x47\x47\x67\x67\x04\x02\x48\x48\x68\x68\x04\x02\x49\x49\x69\x69\x04\x02\
		\x4a\x4a\x6a\x6a\x04\x02\x4b\x4b\x6b\x6b\x04\x02\x4c\x4c\x6c\x6c\x04\x02\
		\x4d\x4d\x6d\x6d\x04\x02\x4e\x4e\x6e\x6e\x04\x02\x4f\x4f\x6f\x6f\x04\x02\
		\x50\x50\x70\x70\x04\x02\x51\x51\x71\x71\x04\x02\x52\x52\x72\x72\x04\x02\
		\x53\x53\x73\x73\x04\x02\x54\x54\x74\x74\x04\x02\x55\x55\x75\x75\x04\x02\
		\x56\x56\x76\x76\x04\x02\x57\x57\x77\x77\x04\x02\x58\x58\x78\x78\x04\x02\
		\x59\x59\x79\x79\x04\x02\x5a\x5a\x7a\x7a\x04\x02\x5b\x5b\x7b\x7b\x04\x02\
		\x5c\x5c\x7c\x7c\x05\x02\x0b\x0c\x0e\x0f\x22\x22\x03\x02\x32\x3b\x04\x02\
		\x43\x5c\x63\x7c\x06\x02\x32\x3b\x43\x5c\x61\x61\x63\x7c\x02\u{81}\x02\
		\x37\x03\x02\x02\x02\x02\x39\x03\x02\x02\x02\x02\x3b\x03\x02\x02\x02\x02\
		\x3d\x03\x02\x02\x02\x02\x3f\x03\x02\x02\x02\x02\x41\x03\x02\x02\x02\x02\
		\x43\x03\x02\x02\x02\x02\x45\x03\x02\x02\x02\x03\x47\x03\x02\x02\x02\x05\
		\x49\x03\x02\x02\x02\x07\x4b\x03\x02\x02\x02\x09\x4d\x03\x02\x02\x02\x0b\
		\x4f\x03\x02\x02\x02\x0d\x51\x03\x02\x02\x02\x0f\x53\x03\x02\x02\x02\x11\
		\x55\x03\x02\x02\x02\x13\x57\x03\x02\x02\x02\x15\x59\x03\x02\x02\x02\x17\
		\x5b\x03\x02\x02\x02\x19\x5d\x03\x02\x02\x02\x1b\x5f\x03\x02\x02\x02\x1d\
		\x61\x03\x02\x02\x02\x1f\x63\x03\x02\x02\x02\x21\x65\x03\x02\x02\x02\x23\
		\x67\x03\x02\x02\x02\x25\x69\x03\x02\x02\x02\x27\x6b\x03\x02\x02\x02\x29\
		\x6d\x03\x02\x02\x02\x2b\x6f\x03\x02\x02\x02\x2d\x71\x03\x02\x02\x02\x2f\
		\x73\x03\x02\x02\x02\x31\x75\x03\x02\x02\x02\x33\x77\x03\x02\x02\x02\x35\
		\x79\x03\x02\x02\x02\x37\x7b\x03\x02\x02\x02\x39\x7f\x03\x02\x02\x02\x3b\
		\u{81}\x03\x02\x02\x02\x3d\u{83}\x03\x02\x02\x02\x3f\u{85}\x03\x02\x02\
		\x02\x41\u{88}\x03\x02\x02\x02\x43\u{8f}\x03\x02\x02\x02\x45\u{93}\x03\
		\x02\x02\x02\x47\x48\x09\x02\x02\x02\x48\x04\x03\x02\x02\x02\x49\x4a\x09\
		\x03\x02\x02\x4a\x06\x03\x02\x02\x02\x4b\x4c\x09\x04\x02\x02\x4c\x08\x03\
		\x02\x02\x02\x4d\x4e\x09\x05\x02\x02\x4e\x0a\x03\x02\x02\x02\x4f\x50\x09\
		\x06\x02\x02\x50\x0c\x03\x02\x02\x02\x51\x52\x09\x07\x02\x02\x52\x0e\x03\
		\x02\x02\x02\x53\x54\x09\x08\x02\x02\x54\x10\x03\x02\x02\x02\x55\x56\x09\
		\x09\x02\x02\x56\x12\x03\x02\x02\x02\x57\x58\x09\x0a\x02\x02\x58\x14\x03\
		\x02\x02\x02\x59\x5a\x09\x0b\x02\x02\x5a\x16\x03\x02\x02\x02\x5b\x5c\x09\
		\x0c\x02\x02\x5c\x18\x03\x02\x02\x02\x5d\x5e\x09\x0d\x02\x02\x5e\x1a\x03\
		\x02\x02\x02\x5f\x60\x09\x0e\x02\x02\x60\x1c\x03\x02\x02\x02\x61\x62\x09\
		\x0f\x02\x02\x62\x1e\x03\x02\x02\x02\x63\x64\x09\x10\x02\x02\x64\x20\x03\
		\x02\x02\x02\x65\x66\x09\x11\x02\x02\x66\x22\x03\x02\x02\x02\x67\x68\x09\
		\x12\x02\x02\x68\x24\x03\x02\x02\x02\x69\x6a\x09\x13\x02\x02\x6a\x26\x03\
		\x02\x02\x02\x6b\x6c\x09\x14\x02\x02\x6c\x28\x03\x02\x02\x02\x6d\x6e\x09\
		\x15\x02\x02\x6e\x2a\x03\x02\x02\x02\x6f\x70\x09\x16\x02\x02\x70\x2c\x03\
		\x02\x02\x02\x71\x72\x09\x17\x02\x02\x72\x2e\x03\x02\x02\x02\x73\x74\x09\
		\x18\x02\x02\x74\x30\x03\x02\x02\x02\x75\x76\x09\x19\x02\x02\x76\x32\x03\
		\x02\x02\x02\x77\x78\x09\x1a\x02\x02\x78\x34\x03\x02\x02\x02\x79\x7a\x09\
		\x1b\x02\x02\x7a\x36\x03\x02\x02\x02\x7b\x7c\x05\x19\x0d\x02\x7c\x7d\x05\
		\x09\x05\x02\x7d\x7e\x05\x13\x0a\x02\x7e\x38\x03\x02\x02\x02\x7f\u{80}\
		\x07\x2a\x02\x02\u{80}\x3a\x03\x02\x02\x02\u{81}\u{82}\x07\x2b\x02\x02\
		\u{82}\x3c\x03\x02\x02\x02\u{83}\u{84}\x07\x3c\x02\x02\u{84}\x3e\x03\x02\
		\x02\x02\u{85}\u{86}\x07\x2e\x02\x02\u{86}\x40\x03\x02\x02\x02\u{87}\u{89}\
		\x09\x1c\x02\x02\u{88}\u{87}\x03\x02\x02\x02\u{89}\u{8a}\x03\x02\x02\x02\
		\u{8a}\u{88}\x03\x02\x02\x02\u{8a}\u{8b}\x03\x02\x02\x02\u{8b}\u{8c}\x03\
		\x02\x02\x02\u{8c}\u{8d}\x08\x21\x02\x02\u{8d}\x42\x03\x02\x02\x02\u{8e}\
		\u{90}\x09\x1d\x02\x02\u{8f}\u{8e}\x03\x02\x02\x02\u{90}\u{91}\x03\x02\
		\x02\x02\u{91}\u{8f}\x03\x02\x02\x02\u{91}\u{92}\x03\x02\x02\x02\u{92}\
		\x44\x03\x02\x02\x02\u{93}\u{95}\x09\x1e\x02\x02\u{94}\u{96}\x09\x1f\x02\
		\x02\u{95}\u{94}\x03\x02\x02\x02\u{96}\u{97}\x03\x02\x02\x02\u{97}\u{95}\
		\x03\x02\x02\x02\u{97}\u{98}\x03\x02\x02\x02\u{98}\x46\x03\x02\x02\x02\
		\x06\x02\u{8a}\u{91}\u{97}\x03\x02\x03\x02";
