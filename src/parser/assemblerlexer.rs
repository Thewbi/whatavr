// Generated from ../../src/parser/assembler.g4 by ANTLR 4.8
#![allow(dead_code)]
#![allow(nonstandard_style)]
#![allow(unused_imports)]
#![allow(unused_variables)]
use antlr_rust::atn::ATN;
use antlr_rust::char_stream::CharStream;
use antlr_rust::int_stream::IntStream;
use antlr_rust::lexer::{BaseLexer, Lexer, LexerRecog};
use antlr_rust::atn_deserializer::ATNDeserializer;
use antlr_rust::dfa::DFA;
use antlr_rust::lexer_atn_simulator::{LexerATNSimulator, ILexerATNSimulator};
use antlr_rust::PredictionContextCache;
use antlr_rust::recognizer::{Recognizer,Actions};
use antlr_rust::error_listener::ErrorListener;
use antlr_rust::TokenSource;
use antlr_rust::token_factory::{TokenFactory,CommonTokenFactory,TokenAware};
use antlr_rust::token::*;
use antlr_rust::rule_context::{BaseRuleContext,EmptyCustomRuleContext,EmptyContext};
use antlr_rust::parser_rule_context::{ParserRuleContext,BaseParserRuleContext,cast};
use antlr_rust::vocabulary::{Vocabulary,VocabularyImpl};

use antlr_rust::{lazy_static,Tid,TidAble,TidExt};

use std::sync::Arc;
use std::cell::RefCell;
use std::rc::Rc;
use std::marker::PhantomData;
use std::ops::{Deref, DerefMut};


	pub const ADD:isize=1; 
	pub const CALL:isize=2; 
	pub const CLR:isize=3; 
	pub const EOR:isize=4; 
	pub const LDI:isize=5; 
	pub const OUT:isize=6; 
	pub const POP:isize=7; 
	pub const PUSH:isize=8; 
	pub const RCALL:isize=9; 
	pub const RET:isize=10; 
	pub const RJMP:isize=11; 
	pub const NEWLINE:isize=12; 
	pub const WS:isize=13; 
	pub const LINE_COMMENT:isize=14; 
	pub const STRING:isize=15; 
	pub const ASTERISK:isize=16; 
	pub const AT:isize=17; 
	pub const CLOSEING_BRACKET:isize=18; 
	pub const COLON:isize=19; 
	pub const COMMA:isize=20; 
	pub const CSEG:isize=21; 
	pub const DEF:isize=22; 
	pub const DOT:isize=23; 
	pub const ELSE:isize=24; 
	pub const END_MACRO:isize=25; 
	pub const ENDIF:isize=26; 
	pub const EQUALS:isize=27; 
	pub const EQU:isize=28; 
	pub const ERROR:isize=29; 
	pub const GT:isize=30; 
	pub const IF:isize=31; 
	pub const INCLUDE:isize=32; 
	pub const LEFT_SHIFT:isize=33; 
	pub const LT:isize=34; 
	pub const MACRO:isize=35; 
	pub const MINUS:isize=36; 
	pub const OPENING_BRACKET:isize=37; 
	pub const ORG:isize=38; 
	pub const PLUS:isize=39; 
	pub const RIGHT_SHIFT:isize=40; 
	pub const SLASH:isize=41; 
	pub const NUMBER:isize=42; 
	pub const HEX_NUMBER:isize=43; 
	pub const IDENTIFIER:isize=44;
	pub const channelNames: [&'static str;0+2] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	];

	pub const modeNames: [&'static str;1] = [
		"DEFAULT_MODE"
	];

	pub const ruleNames: [&'static str;70] = [
		"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", 
		"O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "ADD", "CALL", 
		"CLR", "EOR", "LDI", "OUT", "POP", "PUSH", "RCALL", "RET", "RJMP", "NEWLINE", 
		"WS", "LINE_COMMENT", "STRING", "ASTERISK", "AT", "CLOSEING_BRACKET", 
		"COLON", "COMMA", "CSEG", "DEF", "DOT", "ELSE", "END_MACRO", "ENDIF", 
		"EQUALS", "EQU", "ERROR", "GT", "IF", "INCLUDE", "LEFT_SHIFT", "LT", "MACRO", 
		"MINUS", "OPENING_BRACKET", "ORG", "PLUS", "RIGHT_SHIFT", "SLASH", "NUMBER", 
		"HEX_NUMBER", "IDENTIFIER"
	];


	pub const _LITERAL_NAMES: [Option<&'static str>;42] = [
		None, None, None, None, None, None, None, None, None, None, None, None, 
		None, None, None, None, Some("'*'"), Some("'@'"), Some("')'"), Some("':'"), 
		Some("','"), Some("'cseg'"), Some("'def'"), Some("'.'"), Some("'else'"), 
		Some("'endmacro'"), Some("'endif'"), Some("'='"), Some("'equ'"), Some("'error'"), 
		Some("'>'"), Some("'if'"), Some("'include'"), Some("'<<'"), Some("'<'"), 
		Some("'macro'"), Some("'-'"), Some("'('"), Some("'org'"), Some("'+'"), 
		Some("'>>'"), Some("'/'")
	];
	pub const _SYMBOLIC_NAMES: [Option<&'static str>;45]  = [
		None, Some("ADD"), Some("CALL"), Some("CLR"), Some("EOR"), Some("LDI"), 
		Some("OUT"), Some("POP"), Some("PUSH"), Some("RCALL"), Some("RET"), Some("RJMP"), 
		Some("NEWLINE"), Some("WS"), Some("LINE_COMMENT"), Some("STRING"), Some("ASTERISK"), 
		Some("AT"), Some("CLOSEING_BRACKET"), Some("COLON"), Some("COMMA"), Some("CSEG"), 
		Some("DEF"), Some("DOT"), Some("ELSE"), Some("END_MACRO"), Some("ENDIF"), 
		Some("EQUALS"), Some("EQU"), Some("ERROR"), Some("GT"), Some("IF"), Some("INCLUDE"), 
		Some("LEFT_SHIFT"), Some("LT"), Some("MACRO"), Some("MINUS"), Some("OPENING_BRACKET"), 
		Some("ORG"), Some("PLUS"), Some("RIGHT_SHIFT"), Some("SLASH"), Some("NUMBER"), 
		Some("HEX_NUMBER"), Some("IDENTIFIER")
	];
	lazy_static!{
	    static ref _shared_context_cache: Arc<PredictionContextCache> = Arc::new(PredictionContextCache::new());
		static ref VOCABULARY: Box<dyn Vocabulary> = Box::new(VocabularyImpl::new(_LITERAL_NAMES.iter(), _SYMBOLIC_NAMES.iter(), None));
	}


pub type LexerContext<'input> = BaseRuleContext<'input,EmptyCustomRuleContext<'input,LocalTokenFactory<'input> >>;

pub type LocalTokenFactory<'input> = antlr_rust::token_factory::ArenaCommonFactory<'input>;

type From<'a> = <LocalTokenFactory<'a> as TokenFactory<'a> >::From;

pub struct assemblerLexer<'input, Input:CharStream<From<'input> >> {
	base: BaseLexer<'input,assemblerLexerActions,Input,LocalTokenFactory<'input>>,
}

antlr_rust::tid! { impl<'input,Input> TidAble<'input> for assemblerLexer<'input,Input> where Input:CharStream<From<'input> > }

impl<'input, Input:CharStream<From<'input> >> Deref for assemblerLexer<'input,Input>{
	type Target = BaseLexer<'input,assemblerLexerActions,Input,LocalTokenFactory<'input>>;

	fn deref(&self) -> &Self::Target {
		&self.base
	}
}

impl<'input, Input:CharStream<From<'input> >> DerefMut for assemblerLexer<'input,Input>{
	fn deref_mut(&mut self) -> &mut Self::Target {
		&mut self.base
	}
}


impl<'input, Input:CharStream<From<'input> >> assemblerLexer<'input,Input>{
    fn get_rule_names(&self) -> &'static [&'static str] {
        &ruleNames
    }
    fn get_literal_names(&self) -> &[Option<&str>] {
        &_LITERAL_NAMES
    }

    fn get_symbolic_names(&self) -> &[Option<&str>] {
        &_SYMBOLIC_NAMES
    }

    fn get_grammar_file_name(&self) -> &'static str {
        "assemblerLexer.g4"
    }

	pub fn new_with_token_factory(input: Input, tf: &'input LocalTokenFactory<'input>) -> Self {
		antlr_rust::recognizer::check_version("0","3");
    	Self {
			base: BaseLexer::new_base_lexer(
				input,
				LexerATNSimulator::new_lexer_atnsimulator(
					_ATN.clone(),
					_decision_to_DFA.clone(),
					_shared_context_cache.clone(),
				),
				assemblerLexerActions{},
				tf
			)
	    }
	}
}

impl<'input, Input:CharStream<From<'input> >> assemblerLexer<'input,Input> where &'input LocalTokenFactory<'input>:Default{
	pub fn new(input: Input) -> Self{
		assemblerLexer::new_with_token_factory(input, <&LocalTokenFactory<'input> as Default>::default())
	}
}

pub struct assemblerLexerActions {
}

impl assemblerLexerActions{
}

impl<'input, Input:CharStream<From<'input> >> Actions<'input,BaseLexer<'input,assemblerLexerActions,Input,LocalTokenFactory<'input>>> for assemblerLexerActions{
	}

	impl<'input, Input:CharStream<From<'input> >> assemblerLexer<'input,Input>{

}

impl<'input, Input:CharStream<From<'input> >> LexerRecog<'input,BaseLexer<'input,assemblerLexerActions,Input,LocalTokenFactory<'input>>> for assemblerLexerActions{
}
impl<'input> TokenAware<'input> for assemblerLexerActions{
	type TF = LocalTokenFactory<'input>;
}

impl<'input, Input:CharStream<From<'input> >> TokenSource<'input> for assemblerLexer<'input,Input>{
	type TF = LocalTokenFactory<'input>;

    fn next_token(&mut self) -> <Self::TF as TokenFactory<'input>>::Tok {
        self.base.next_token()
    }

    fn get_line(&self) -> isize {
        self.base.get_line()
    }

    fn get_char_position_in_line(&self) -> isize {
        self.base.get_char_position_in_line()
    }

    fn get_input_stream(&mut self) -> Option<&mut dyn IntStream> {
        self.base.get_input_stream()
    }

	fn get_source_name(&self) -> String {
		self.base.get_source_name()
	}

    fn get_token_factory(&self) -> &'input Self::TF {
        self.base.get_token_factory()
    }
}



	lazy_static! {
	    static ref _ATN: Arc<ATN> =
	        Arc::new(ATNDeserializer::new(None).deserialize(_serializedATN.chars()));
	    static ref _decision_to_DFA: Arc<Vec<antlr_rust::RwLock<DFA>>> = {
	        let mut dfa = Vec::new();
	        let size = _ATN.decision_to_state.len();
	        for i in 0..size {
	            dfa.push(DFA::new(
	                _ATN.clone(),
	                _ATN.get_decision_state(i),
	                i as isize,
	            ).into())
	        }
	        Arc::new(dfa)
	    };
	}



	const _serializedATN:&'static str =
		"\x03\u{608b}\u{a72a}\u{8133}\u{b9ed}\u{417c}\u{3be7}\u{7786}\u{5964}\x02\
		\x2e\u{182}\x08\x01\x04\x02\x09\x02\x04\x03\x09\x03\x04\x04\x09\x04\x04\
		\x05\x09\x05\x04\x06\x09\x06\x04\x07\x09\x07\x04\x08\x09\x08\x04\x09\x09\
		\x09\x04\x0a\x09\x0a\x04\x0b\x09\x0b\x04\x0c\x09\x0c\x04\x0d\x09\x0d\x04\
		\x0e\x09\x0e\x04\x0f\x09\x0f\x04\x10\x09\x10\x04\x11\x09\x11\x04\x12\x09\
		\x12\x04\x13\x09\x13\x04\x14\x09\x14\x04\x15\x09\x15\x04\x16\x09\x16\x04\
		\x17\x09\x17\x04\x18\x09\x18\x04\x19\x09\x19\x04\x1a\x09\x1a\x04\x1b\x09\
		\x1b\x04\x1c\x09\x1c\x04\x1d\x09\x1d\x04\x1e\x09\x1e\x04\x1f\x09\x1f\x04\
		\x20\x09\x20\x04\x21\x09\x21\x04\x22\x09\x22\x04\x23\x09\x23\x04\x24\x09\
		\x24\x04\x25\x09\x25\x04\x26\x09\x26\x04\x27\x09\x27\x04\x28\x09\x28\x04\
		\x29\x09\x29\x04\x2a\x09\x2a\x04\x2b\x09\x2b\x04\x2c\x09\x2c\x04\x2d\x09\
		\x2d\x04\x2e\x09\x2e\x04\x2f\x09\x2f\x04\x30\x09\x30\x04\x31\x09\x31\x04\
		\x32\x09\x32\x04\x33\x09\x33\x04\x34\x09\x34\x04\x35\x09\x35\x04\x36\x09\
		\x36\x04\x37\x09\x37\x04\x38\x09\x38\x04\x39\x09\x39\x04\x3a\x09\x3a\x04\
		\x3b\x09\x3b\x04\x3c\x09\x3c\x04\x3d\x09\x3d\x04\x3e\x09\x3e\x04\x3f\x09\
		\x3f\x04\x40\x09\x40\x04\x41\x09\x41\x04\x42\x09\x42\x04\x43\x09\x43\x04\
		\x44\x09\x44\x04\x45\x09\x45\x04\x46\x09\x46\x04\x47\x09\x47\x03\x02\x03\
		\x02\x03\x03\x03\x03\x03\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\
		\x07\x03\x07\x03\x08\x03\x08\x03\x09\x03\x09\x03\x0a\x03\x0a\x03\x0b\x03\
		\x0b\x03\x0c\x03\x0c\x03\x0d\x03\x0d\x03\x0e\x03\x0e\x03\x0f\x03\x0f\x03\
		\x10\x03\x10\x03\x11\x03\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\
		\x14\x03\x15\x03\x15\x03\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\
		\x19\x03\x19\x03\x1a\x03\x1a\x03\x1b\x03\x1b\x03\x1c\x03\x1c\x03\x1c\x03\
		\x1c\x03\x1d\x03\x1d\x03\x1d\x03\x1d\x03\x1d\x03\x1e\x03\x1e\x03\x1e\x03\
		\x1e\x03\x1f\x03\x1f\x03\x1f\x03\x1f\x03\x20\x03\x20\x03\x20\x03\x20\x03\
		\x21\x03\x21\x03\x21\x03\x21\x03\x22\x03\x22\x03\x22\x03\x22\x03\x23\x03\
		\x23\x03\x23\x03\x23\x03\x23\x03\x24\x03\x24\x03\x24\x03\x24\x03\x24\x03\
		\x24\x03\x25\x03\x25\x03\x25\x03\x25\x03\x26\x03\x26\x03\x26\x03\x26\x03\
		\x26\x03\x27\x05\x27\u{f6}\x0a\x27\x03\x27\x03\x27\x03\x28\x06\x28\u{fb}\
		\x0a\x28\x0d\x28\x0e\x28\u{fc}\x03\x28\x03\x28\x03\x29\x03\x29\x07\x29\
		\u{103}\x0a\x29\x0c\x29\x0e\x29\u{106}\x0b\x29\x03\x29\x03\x29\x03\x2a\
		\x03\x2a\x03\x2a\x03\x2a\x07\x2a\u{10e}\x0a\x2a\x0c\x2a\x0e\x2a\u{111}\
		\x0b\x2a\x03\x2a\x03\x2a\x03\x2b\x03\x2b\x03\x2c\x03\x2c\x03\x2d\x03\x2d\
		\x03\x2e\x03\x2e\x03\x2f\x03\x2f\x03\x30\x03\x30\x03\x30\x03\x30\x03\x30\
		\x03\x31\x03\x31\x03\x31\x03\x31\x03\x32\x03\x32\x03\x33\x03\x33\x03\x33\
		\x03\x33\x03\x33\x03\x34\x03\x34\x03\x34\x03\x34\x03\x34\x03\x34\x03\x34\
		\x03\x34\x03\x34\x03\x35\x03\x35\x03\x35\x03\x35\x03\x35\x03\x35\x03\x36\
		\x03\x36\x03\x37\x03\x37\x03\x37\x03\x37\x03\x38\x03\x38\x03\x38\x03\x38\
		\x03\x38\x03\x38\x03\x39\x03\x39\x03\x3a\x03\x3a\x03\x3a\x03\x3b\x03\x3b\
		\x03\x3b\x03\x3b\x03\x3b\x03\x3b\x03\x3b\x03\x3b\x03\x3c\x03\x3c\x03\x3c\
		\x03\x3d\x03\x3d\x03\x3e\x03\x3e\x03\x3e\x03\x3e\x03\x3e\x03\x3e\x03\x3f\
		\x03\x3f\x03\x40\x03\x40\x03\x41\x03\x41\x03\x41\x03\x41\x03\x42\x03\x42\
		\x03\x43\x03\x43\x03\x43\x03\x44\x03\x44\x03\x45\x06\x45\u{172}\x0a\x45\
		\x0d\x45\x0e\x45\u{173}\x03\x46\x03\x46\x03\x46\x06\x46\u{179}\x0a\x46\
		\x0d\x46\x0e\x46\u{17a}\x03\x47\x03\x47\x06\x47\u{17f}\x0a\x47\x0d\x47\
		\x0e\x47\u{180}\x02\x02\x48\x03\x02\x05\x02\x07\x02\x09\x02\x0b\x02\x0d\
		\x02\x0f\x02\x11\x02\x13\x02\x15\x02\x17\x02\x19\x02\x1b\x02\x1d\x02\x1f\
		\x02\x21\x02\x23\x02\x25\x02\x27\x02\x29\x02\x2b\x02\x2d\x02\x2f\x02\x31\
		\x02\x33\x02\x35\x02\x37\x03\x39\x04\x3b\x05\x3d\x06\x3f\x07\x41\x08\x43\
		\x09\x45\x0a\x47\x0b\x49\x0c\x4b\x0d\x4d\x0e\x4f\x0f\x51\x10\x53\x11\x55\
		\x12\x57\x13\x59\x14\x5b\x15\x5d\x16\x5f\x17\x61\x18\x63\x19\x65\x1a\x67\
		\x1b\x69\x1c\x6b\x1d\x6d\x1e\x6f\x1f\x71\x20\x73\x21\x75\x22\x77\x23\x79\
		\x24\x7b\x25\x7d\x26\x7f\x27\u{81}\x28\u{83}\x29\u{85}\x2a\u{87}\x2b\u{89}\
		\x2c\u{8b}\x2d\u{8d}\x2e\x03\x02\x23\x04\x02\x43\x43\x63\x63\x04\x02\x44\
		\x44\x64\x64\x04\x02\x45\x45\x65\x65\x04\x02\x46\x46\x66\x66\x04\x02\x47\
		\x47\x67\x67\x04\x02\x48\x48\x68\x68\x04\x02\x49\x49\x69\x69\x04\x02\x4a\
		\x4a\x6a\x6a\x04\x02\x4b\x4b\x6b\x6b\x04\x02\x4c\x4c\x6c\x6c\x04\x02\x4d\
		\x4d\x6d\x6d\x04\x02\x4e\x4e\x6e\x6e\x04\x02\x4f\x4f\x6f\x6f\x04\x02\x50\
		\x50\x70\x70\x04\x02\x51\x51\x71\x71\x04\x02\x52\x52\x72\x72\x04\x02\x53\
		\x53\x73\x73\x04\x02\x54\x54\x74\x74\x04\x02\x55\x55\x75\x75\x04\x02\x56\
		\x56\x76\x76\x04\x02\x57\x57\x77\x77\x04\x02\x58\x58\x78\x78\x04\x02\x59\
		\x59\x79\x79\x04\x02\x5a\x5a\x7a\x7a\x04\x02\x5b\x5b\x7b\x7b\x04\x02\x5c\
		\x5c\x7c\x7c\x05\x02\x0b\x0c\x0e\x0f\x22\x22\x04\x02\x0c\x0c\x0f\x0f\x03\
		\x02\x24\x24\x03\x02\x32\x3b\x05\x02\x32\x3b\x43\x48\x63\x68\x04\x02\x43\
		\x5c\x63\x7c\x06\x02\x32\x3b\x43\x5c\x61\x61\x63\x7c\x02\u{16f}\x02\x37\
		\x03\x02\x02\x02\x02\x39\x03\x02\x02\x02\x02\x3b\x03\x02\x02\x02\x02\x3d\
		\x03\x02\x02\x02\x02\x3f\x03\x02\x02\x02\x02\x41\x03\x02\x02\x02\x02\x43\
		\x03\x02\x02\x02\x02\x45\x03\x02\x02\x02\x02\x47\x03\x02\x02\x02\x02\x49\
		\x03\x02\x02\x02\x02\x4b\x03\x02\x02\x02\x02\x4d\x03\x02\x02\x02\x02\x4f\
		\x03\x02\x02\x02\x02\x51\x03\x02\x02\x02\x02\x53\x03\x02\x02\x02\x02\x55\
		\x03\x02\x02\x02\x02\x57\x03\x02\x02\x02\x02\x59\x03\x02\x02\x02\x02\x5b\
		\x03\x02\x02\x02\x02\x5d\x03\x02\x02\x02\x02\x5f\x03\x02\x02\x02\x02\x61\
		\x03\x02\x02\x02\x02\x63\x03\x02\x02\x02\x02\x65\x03\x02\x02\x02\x02\x67\
		\x03\x02\x02\x02\x02\x69\x03\x02\x02\x02\x02\x6b\x03\x02\x02\x02\x02\x6d\
		\x03\x02\x02\x02\x02\x6f\x03\x02\x02\x02\x02\x71\x03\x02\x02\x02\x02\x73\
		\x03\x02\x02\x02\x02\x75\x03\x02\x02\x02\x02\x77\x03\x02\x02\x02\x02\x79\
		\x03\x02\x02\x02\x02\x7b\x03\x02\x02\x02\x02\x7d\x03\x02\x02\x02\x02\x7f\
		\x03\x02\x02\x02\x02\u{81}\x03\x02\x02\x02\x02\u{83}\x03\x02\x02\x02\x02\
		\u{85}\x03\x02\x02\x02\x02\u{87}\x03\x02\x02\x02\x02\u{89}\x03\x02\x02\
		\x02\x02\u{8b}\x03\x02\x02\x02\x02\u{8d}\x03\x02\x02\x02\x03\u{8f}\x03\
		\x02\x02\x02\x05\u{91}\x03\x02\x02\x02\x07\u{93}\x03\x02\x02\x02\x09\u{95}\
		\x03\x02\x02\x02\x0b\u{97}\x03\x02\x02\x02\x0d\u{99}\x03\x02\x02\x02\x0f\
		\u{9b}\x03\x02\x02\x02\x11\u{9d}\x03\x02\x02\x02\x13\u{9f}\x03\x02\x02\
		\x02\x15\u{a1}\x03\x02\x02\x02\x17\u{a3}\x03\x02\x02\x02\x19\u{a5}\x03\
		\x02\x02\x02\x1b\u{a7}\x03\x02\x02\x02\x1d\u{a9}\x03\x02\x02\x02\x1f\u{ab}\
		\x03\x02\x02\x02\x21\u{ad}\x03\x02\x02\x02\x23\u{af}\x03\x02\x02\x02\x25\
		\u{b1}\x03\x02\x02\x02\x27\u{b3}\x03\x02\x02\x02\x29\u{b5}\x03\x02\x02\
		\x02\x2b\u{b7}\x03\x02\x02\x02\x2d\u{b9}\x03\x02\x02\x02\x2f\u{bb}\x03\
		\x02\x02\x02\x31\u{bd}\x03\x02\x02\x02\x33\u{bf}\x03\x02\x02\x02\x35\u{c1}\
		\x03\x02\x02\x02\x37\u{c3}\x03\x02\x02\x02\x39\u{c7}\x03\x02\x02\x02\x3b\
		\u{cc}\x03\x02\x02\x02\x3d\u{d0}\x03\x02\x02\x02\x3f\u{d4}\x03\x02\x02\
		\x02\x41\u{d8}\x03\x02\x02\x02\x43\u{dc}\x03\x02\x02\x02\x45\u{e0}\x03\
		\x02\x02\x02\x47\u{e5}\x03\x02\x02\x02\x49\u{eb}\x03\x02\x02\x02\x4b\u{ef}\
		\x03\x02\x02\x02\x4d\u{f5}\x03\x02\x02\x02\x4f\u{fa}\x03\x02\x02\x02\x51\
		\u{100}\x03\x02\x02\x02\x53\u{109}\x03\x02\x02\x02\x55\u{114}\x03\x02\x02\
		\x02\x57\u{116}\x03\x02\x02\x02\x59\u{118}\x03\x02\x02\x02\x5b\u{11a}\x03\
		\x02\x02\x02\x5d\u{11c}\x03\x02\x02\x02\x5f\u{11e}\x03\x02\x02\x02\x61\
		\u{123}\x03\x02\x02\x02\x63\u{127}\x03\x02\x02\x02\x65\u{129}\x03\x02\x02\
		\x02\x67\u{12e}\x03\x02\x02\x02\x69\u{137}\x03\x02\x02\x02\x6b\u{13d}\x03\
		\x02\x02\x02\x6d\u{13f}\x03\x02\x02\x02\x6f\u{143}\x03\x02\x02\x02\x71\
		\u{149}\x03\x02\x02\x02\x73\u{14b}\x03\x02\x02\x02\x75\u{14e}\x03\x02\x02\
		\x02\x77\u{156}\x03\x02\x02\x02\x79\u{159}\x03\x02\x02\x02\x7b\u{15b}\x03\
		\x02\x02\x02\x7d\u{161}\x03\x02\x02\x02\x7f\u{163}\x03\x02\x02\x02\u{81}\
		\u{165}\x03\x02\x02\x02\u{83}\u{169}\x03\x02\x02\x02\u{85}\u{16b}\x03\x02\
		\x02\x02\u{87}\u{16e}\x03\x02\x02\x02\u{89}\u{171}\x03\x02\x02\x02\u{8b}\
		\u{175}\x03\x02\x02\x02\u{8d}\u{17c}\x03\x02\x02\x02\u{8f}\u{90}\x09\x02\
		\x02\x02\u{90}\x04\x03\x02\x02\x02\u{91}\u{92}\x09\x03\x02\x02\u{92}\x06\
		\x03\x02\x02\x02\u{93}\u{94}\x09\x04\x02\x02\u{94}\x08\x03\x02\x02\x02\
		\u{95}\u{96}\x09\x05\x02\x02\u{96}\x0a\x03\x02\x02\x02\u{97}\u{98}\x09\
		\x06\x02\x02\u{98}\x0c\x03\x02\x02\x02\u{99}\u{9a}\x09\x07\x02\x02\u{9a}\
		\x0e\x03\x02\x02\x02\u{9b}\u{9c}\x09\x08\x02\x02\u{9c}\x10\x03\x02\x02\
		\x02\u{9d}\u{9e}\x09\x09\x02\x02\u{9e}\x12\x03\x02\x02\x02\u{9f}\u{a0}\
		\x09\x0a\x02\x02\u{a0}\x14\x03\x02\x02\x02\u{a1}\u{a2}\x09\x0b\x02\x02\
		\u{a2}\x16\x03\x02\x02\x02\u{a3}\u{a4}\x09\x0c\x02\x02\u{a4}\x18\x03\x02\
		\x02\x02\u{a5}\u{a6}\x09\x0d\x02\x02\u{a6}\x1a\x03\x02\x02\x02\u{a7}\u{a8}\
		\x09\x0e\x02\x02\u{a8}\x1c\x03\x02\x02\x02\u{a9}\u{aa}\x09\x0f\x02\x02\
		\u{aa}\x1e\x03\x02\x02\x02\u{ab}\u{ac}\x09\x10\x02\x02\u{ac}\x20\x03\x02\
		\x02\x02\u{ad}\u{ae}\x09\x11\x02\x02\u{ae}\x22\x03\x02\x02\x02\u{af}\u{b0}\
		\x09\x12\x02\x02\u{b0}\x24\x03\x02\x02\x02\u{b1}\u{b2}\x09\x13\x02\x02\
		\u{b2}\x26\x03\x02\x02\x02\u{b3}\u{b4}\x09\x14\x02\x02\u{b4}\x28\x03\x02\
		\x02\x02\u{b5}\u{b6}\x09\x15\x02\x02\u{b6}\x2a\x03\x02\x02\x02\u{b7}\u{b8}\
		\x09\x16\x02\x02\u{b8}\x2c\x03\x02\x02\x02\u{b9}\u{ba}\x09\x17\x02\x02\
		\u{ba}\x2e\x03\x02\x02\x02\u{bb}\u{bc}\x09\x18\x02\x02\u{bc}\x30\x03\x02\
		\x02\x02\u{bd}\u{be}\x09\x19\x02\x02\u{be}\x32\x03\x02\x02\x02\u{bf}\u{c0}\
		\x09\x1a\x02\x02\u{c0}\x34\x03\x02\x02\x02\u{c1}\u{c2}\x09\x1b\x02\x02\
		\u{c2}\x36\x03\x02\x02\x02\u{c3}\u{c4}\x05\x03\x02\x02\u{c4}\u{c5}\x05\
		\x09\x05\x02\u{c5}\u{c6}\x05\x09\x05\x02\u{c6}\x38\x03\x02\x02\x02\u{c7}\
		\u{c8}\x05\x07\x04\x02\u{c8}\u{c9}\x05\x03\x02\x02\u{c9}\u{ca}\x05\x19\
		\x0d\x02\u{ca}\u{cb}\x05\x19\x0d\x02\u{cb}\x3a\x03\x02\x02\x02\u{cc}\u{cd}\
		\x05\x07\x04\x02\u{cd}\u{ce}\x05\x19\x0d\x02\u{ce}\u{cf}\x05\x25\x13\x02\
		\u{cf}\x3c\x03\x02\x02\x02\u{d0}\u{d1}\x05\x0b\x06\x02\u{d1}\u{d2}\x05\
		\x1f\x10\x02\u{d2}\u{d3}\x05\x25\x13\x02\u{d3}\x3e\x03\x02\x02\x02\u{d4}\
		\u{d5}\x05\x19\x0d\x02\u{d5}\u{d6}\x05\x09\x05\x02\u{d6}\u{d7}\x05\x13\
		\x0a\x02\u{d7}\x40\x03\x02\x02\x02\u{d8}\u{d9}\x05\x1f\x10\x02\u{d9}\u{da}\
		\x05\x2b\x16\x02\u{da}\u{db}\x05\x29\x15\x02\u{db}\x42\x03\x02\x02\x02\
		\u{dc}\u{dd}\x05\x21\x11\x02\u{dd}\u{de}\x05\x1f\x10\x02\u{de}\u{df}\x05\
		\x21\x11\x02\u{df}\x44\x03\x02\x02\x02\u{e0}\u{e1}\x05\x21\x11\x02\u{e1}\
		\u{e2}\x05\x2b\x16\x02\u{e2}\u{e3}\x05\x27\x14\x02\u{e3}\u{e4}\x05\x11\
		\x09\x02\u{e4}\x46\x03\x02\x02\x02\u{e5}\u{e6}\x05\x25\x13\x02\u{e6}\u{e7}\
		\x05\x07\x04\x02\u{e7}\u{e8}\x05\x03\x02\x02\u{e8}\u{e9}\x05\x19\x0d\x02\
		\u{e9}\u{ea}\x05\x19\x0d\x02\u{ea}\x48\x03\x02\x02\x02\u{eb}\u{ec}\x05\
		\x25\x13\x02\u{ec}\u{ed}\x05\x0b\x06\x02\u{ed}\u{ee}\x05\x29\x15\x02\u{ee}\
		\x4a\x03\x02\x02\x02\u{ef}\u{f0}\x05\x25\x13\x02\u{f0}\u{f1}\x05\x15\x0b\
		\x02\u{f1}\u{f2}\x05\x1b\x0e\x02\u{f2}\u{f3}\x05\x21\x11\x02\u{f3}\x4c\
		\x03\x02\x02\x02\u{f4}\u{f6}\x07\x0f\x02\x02\u{f5}\u{f4}\x03\x02\x02\x02\
		\u{f5}\u{f6}\x03\x02\x02\x02\u{f6}\u{f7}\x03\x02\x02\x02\u{f7}\u{f8}\x07\
		\x0c\x02\x02\u{f8}\x4e\x03\x02\x02\x02\u{f9}\u{fb}\x09\x1c\x02\x02\u{fa}\
		\u{f9}\x03\x02\x02\x02\u{fb}\u{fc}\x03\x02\x02\x02\u{fc}\u{fa}\x03\x02\
		\x02\x02\u{fc}\u{fd}\x03\x02\x02\x02\u{fd}\u{fe}\x03\x02\x02\x02\u{fe}\
		\u{ff}\x08\x28\x02\x02\u{ff}\x50\x03\x02\x02\x02\u{100}\u{104}\x07\x3d\
		\x02\x02\u{101}\u{103}\x0a\x1d\x02\x02\u{102}\u{101}\x03\x02\x02\x02\u{103}\
		\u{106}\x03\x02\x02\x02\u{104}\u{102}\x03\x02\x02\x02\u{104}\u{105}\x03\
		\x02\x02\x02\u{105}\u{107}\x03\x02\x02\x02\u{106}\u{104}\x03\x02\x02\x02\
		\u{107}\u{108}\x08\x29\x03\x02\u{108}\x52\x03\x02\x02\x02\u{109}\u{10f}\
		\x07\x24\x02\x02\u{10a}\u{10b}\x07\x24\x02\x02\u{10b}\u{10e}\x07\x24\x02\
		\x02\u{10c}\u{10e}\x0a\x1e\x02\x02\u{10d}\u{10a}\x03\x02\x02\x02\u{10d}\
		\u{10c}\x03\x02\x02\x02\u{10e}\u{111}\x03\x02\x02\x02\u{10f}\u{10d}\x03\
		\x02\x02\x02\u{10f}\u{110}\x03\x02\x02\x02\u{110}\u{112}\x03\x02\x02\x02\
		\u{111}\u{10f}\x03\x02\x02\x02\u{112}\u{113}\x07\x24\x02\x02\u{113}\x54\
		\x03\x02\x02\x02\u{114}\u{115}\x07\x2c\x02\x02\u{115}\x56\x03\x02\x02\x02\
		\u{116}\u{117}\x07\x42\x02\x02\u{117}\x58\x03\x02\x02\x02\u{118}\u{119}\
		\x07\x2b\x02\x02\u{119}\x5a\x03\x02\x02\x02\u{11a}\u{11b}\x07\x3c\x02\x02\
		\u{11b}\x5c\x03\x02\x02\x02\u{11c}\u{11d}\x07\x2e\x02\x02\u{11d}\x5e\x03\
		\x02\x02\x02\u{11e}\u{11f}\x07\x65\x02\x02\u{11f}\u{120}\x07\x75\x02\x02\
		\u{120}\u{121}\x07\x67\x02\x02\u{121}\u{122}\x07\x69\x02\x02\u{122}\x60\
		\x03\x02\x02\x02\u{123}\u{124}\x07\x66\x02\x02\u{124}\u{125}\x07\x67\x02\
		\x02\u{125}\u{126}\x07\x68\x02\x02\u{126}\x62\x03\x02\x02\x02\u{127}\u{128}\
		\x07\x30\x02\x02\u{128}\x64\x03\x02\x02\x02\u{129}\u{12a}\x07\x67\x02\x02\
		\u{12a}\u{12b}\x07\x6e\x02\x02\u{12b}\u{12c}\x07\x75\x02\x02\u{12c}\u{12d}\
		\x07\x67\x02\x02\u{12d}\x66\x03\x02\x02\x02\u{12e}\u{12f}\x07\x67\x02\x02\
		\u{12f}\u{130}\x07\x70\x02\x02\u{130}\u{131}\x07\x66\x02\x02\u{131}\u{132}\
		\x07\x6f\x02\x02\u{132}\u{133}\x07\x63\x02\x02\u{133}\u{134}\x07\x65\x02\
		\x02\u{134}\u{135}\x07\x74\x02\x02\u{135}\u{136}\x07\x71\x02\x02\u{136}\
		\x68\x03\x02\x02\x02\u{137}\u{138}\x07\x67\x02\x02\u{138}\u{139}\x07\x70\
		\x02\x02\u{139}\u{13a}\x07\x66\x02\x02\u{13a}\u{13b}\x07\x6b\x02\x02\u{13b}\
		\u{13c}\x07\x68\x02\x02\u{13c}\x6a\x03\x02\x02\x02\u{13d}\u{13e}\x07\x3f\
		\x02\x02\u{13e}\x6c\x03\x02\x02\x02\u{13f}\u{140}\x07\x67\x02\x02\u{140}\
		\u{141}\x07\x73\x02\x02\u{141}\u{142}\x07\x77\x02\x02\u{142}\x6e\x03\x02\
		\x02\x02\u{143}\u{144}\x07\x67\x02\x02\u{144}\u{145}\x07\x74\x02\x02\u{145}\
		\u{146}\x07\x74\x02\x02\u{146}\u{147}\x07\x71\x02\x02\u{147}\u{148}\x07\
		\x74\x02\x02\u{148}\x70\x03\x02\x02\x02\u{149}\u{14a}\x07\x40\x02\x02\u{14a}\
		\x72\x03\x02\x02\x02\u{14b}\u{14c}\x07\x6b\x02\x02\u{14c}\u{14d}\x07\x68\
		\x02\x02\u{14d}\x74\x03\x02\x02\x02\u{14e}\u{14f}\x07\x6b\x02\x02\u{14f}\
		\u{150}\x07\x70\x02\x02\u{150}\u{151}\x07\x65\x02\x02\u{151}\u{152}\x07\
		\x6e\x02\x02\u{152}\u{153}\x07\x77\x02\x02\u{153}\u{154}\x07\x66\x02\x02\
		\u{154}\u{155}\x07\x67\x02\x02\u{155}\x76\x03\x02\x02\x02\u{156}\u{157}\
		\x07\x3e\x02\x02\u{157}\u{158}\x07\x3e\x02\x02\u{158}\x78\x03\x02\x02\x02\
		\u{159}\u{15a}\x07\x3e\x02\x02\u{15a}\x7a\x03\x02\x02\x02\u{15b}\u{15c}\
		\x07\x6f\x02\x02\u{15c}\u{15d}\x07\x63\x02\x02\u{15d}\u{15e}\x07\x65\x02\
		\x02\u{15e}\u{15f}\x07\x74\x02\x02\u{15f}\u{160}\x07\x71\x02\x02\u{160}\
		\x7c\x03\x02\x02\x02\u{161}\u{162}\x07\x2f\x02\x02\u{162}\x7e\x03\x02\x02\
		\x02\u{163}\u{164}\x07\x2a\x02\x02\u{164}\u{80}\x03\x02\x02\x02\u{165}\
		\u{166}\x07\x71\x02\x02\u{166}\u{167}\x07\x74\x02\x02\u{167}\u{168}\x07\
		\x69\x02\x02\u{168}\u{82}\x03\x02\x02\x02\u{169}\u{16a}\x07\x2d\x02\x02\
		\u{16a}\u{84}\x03\x02\x02\x02\u{16b}\u{16c}\x07\x40\x02\x02\u{16c}\u{16d}\
		\x07\x40\x02\x02\u{16d}\u{86}\x03\x02\x02\x02\u{16e}\u{16f}\x07\x31\x02\
		\x02\u{16f}\u{88}\x03\x02\x02\x02\u{170}\u{172}\x09\x1f\x02\x02\u{171}\
		\u{170}\x03\x02\x02\x02\u{172}\u{173}\x03\x02\x02\x02\u{173}\u{171}\x03\
		\x02\x02\x02\u{173}\u{174}\x03\x02\x02\x02\u{174}\u{8a}\x03\x02\x02\x02\
		\u{175}\u{176}\x07\x32\x02\x02\u{176}\u{178}\x07\x7a\x02\x02\u{177}\u{179}\
		\x09\x20\x02\x02\u{178}\u{177}\x03\x02\x02\x02\u{179}\u{17a}\x03\x02\x02\
		\x02\u{17a}\u{178}\x03\x02\x02\x02\u{17a}\u{17b}\x03\x02\x02\x02\u{17b}\
		\u{8c}\x03\x02\x02\x02\u{17c}\u{17e}\x09\x21\x02\x02\u{17d}\u{17f}\x09\
		\x22\x02\x02\u{17e}\u{17d}\x03\x02\x02\x02\u{17f}\u{180}\x03\x02\x02\x02\
		\u{180}\u{17e}\x03\x02\x02\x02\u{180}\u{181}\x03\x02\x02\x02\u{181}\u{8e}\
		\x03\x02\x02\x02\x0b\x02\u{f5}\u{fc}\u{104}\u{10d}\u{10f}\u{173}\u{17a}\
		\u{180}\x04\x08\x02\x02\x02\x03\x02";
