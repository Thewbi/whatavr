// Generated from ../../src/parser/assembler.g4 by ANTLR 4.8
#![allow(dead_code)]
#![allow(nonstandard_style)]
#![allow(unused_imports)]
#![allow(unused_variables)]
use antlr_rust::atn::ATN;
use antlr_rust::char_stream::CharStream;
use antlr_rust::int_stream::IntStream;
use antlr_rust::lexer::{BaseLexer, Lexer, LexerRecog};
use antlr_rust::atn_deserializer::ATNDeserializer;
use antlr_rust::dfa::DFA;
use antlr_rust::lexer_atn_simulator::{LexerATNSimulator, ILexerATNSimulator};
use antlr_rust::PredictionContextCache;
use antlr_rust::recognizer::{Recognizer,Actions};
use antlr_rust::error_listener::ErrorListener;
use antlr_rust::TokenSource;
use antlr_rust::token_factory::{TokenFactory,CommonTokenFactory,TokenAware};
use antlr_rust::token::*;
use antlr_rust::rule_context::{BaseRuleContext,EmptyCustomRuleContext,EmptyContext};
use antlr_rust::parser_rule_context::{ParserRuleContext,BaseParserRuleContext,cast};
use antlr_rust::vocabulary::{Vocabulary,VocabularyImpl};

use antlr_rust::{lazy_static,Tid,TidAble,TidExt};

use std::sync::Arc;
use std::cell::RefCell;
use std::rc::Rc;
use std::marker::PhantomData;
use std::ops::{Deref, DerefMut};


	pub const LDI:isize=1; 
	pub const LINE_COMMENT:isize=2; 
	pub const STRING:isize=3; 
	pub const ASTERISK:isize=4; 
	pub const CLOSEING_BRACKET:isize=5; 
	pub const COLON:isize=6; 
	pub const COMMA:isize=7; 
	pub const CSEG:isize=8; 
	pub const DEF:isize=9; 
	pub const DOT:isize=10; 
	pub const ELSE:isize=11; 
	pub const END_MACRO:isize=12; 
	pub const ENDIF:isize=13; 
	pub const EQUALS:isize=14; 
	pub const EQU:isize=15; 
	pub const ERROR:isize=16; 
	pub const IF:isize=17; 
	pub const INCLUDE:isize=18; 
	pub const MACRO:isize=19; 
	pub const MINUS:isize=20; 
	pub const OPENING_BRACKET:isize=21; 
	pub const ORG:isize=22; 
	pub const PLUS:isize=23; 
	pub const SLASH:isize=24; 
	pub const NEWLINE:isize=25; 
	pub const WS:isize=26; 
	pub const NUMBER:isize=27; 
	pub const HEX_NUMBER:isize=28; 
	pub const IDENTIFIER:isize=29;
	pub const channelNames: [&'static str;0+2] = [
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	];

	pub const modeNames: [&'static str;1] = [
		"DEFAULT_MODE"
	];

	pub const ruleNames: [&'static str;55] = [
		"A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", 
		"O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "LDI", "LINE_COMMENT", 
		"STRING", "ASTERISK", "CLOSEING_BRACKET", "COLON", "COMMA", "CSEG", "DEF", 
		"DOT", "ELSE", "END_MACRO", "ENDIF", "EQUALS", "EQU", "ERROR", "IF", "INCLUDE", 
		"MACRO", "MINUS", "OPENING_BRACKET", "ORG", "PLUS", "SLASH", "NEWLINE", 
		"WS", "NUMBER", "HEX_NUMBER", "IDENTIFIER"
	];


	pub const _LITERAL_NAMES: [Option<&'static str>;25] = [
		None, None, None, None, Some("'*'"), Some("')'"), Some("':'"), Some("','"), 
		Some("'cseg'"), Some("'def'"), Some("'.'"), Some("'else'"), Some("'endmacro'"), 
		Some("'endif'"), Some("'='"), Some("'equ'"), Some("'error'"), Some("'if'"), 
		Some("'include'"), Some("'macro'"), Some("'-'"), Some("'('"), Some("'org'"), 
		Some("'+'"), Some("'/'")
	];
	pub const _SYMBOLIC_NAMES: [Option<&'static str>;30]  = [
		None, Some("LDI"), Some("LINE_COMMENT"), Some("STRING"), Some("ASTERISK"), 
		Some("CLOSEING_BRACKET"), Some("COLON"), Some("COMMA"), Some("CSEG"), 
		Some("DEF"), Some("DOT"), Some("ELSE"), Some("END_MACRO"), Some("ENDIF"), 
		Some("EQUALS"), Some("EQU"), Some("ERROR"), Some("IF"), Some("INCLUDE"), 
		Some("MACRO"), Some("MINUS"), Some("OPENING_BRACKET"), Some("ORG"), Some("PLUS"), 
		Some("SLASH"), Some("NEWLINE"), Some("WS"), Some("NUMBER"), Some("HEX_NUMBER"), 
		Some("IDENTIFIER")
	];
	lazy_static!{
	    static ref _shared_context_cache: Arc<PredictionContextCache> = Arc::new(PredictionContextCache::new());
		static ref VOCABULARY: Box<dyn Vocabulary> = Box::new(VocabularyImpl::new(_LITERAL_NAMES.iter(), _SYMBOLIC_NAMES.iter(), None));
	}


pub type LexerContext<'input> = BaseRuleContext<'input,EmptyCustomRuleContext<'input,LocalTokenFactory<'input> >>;

pub type LocalTokenFactory<'input> = antlr_rust::token_factory::ArenaCommonFactory<'input>;

type From<'a> = <LocalTokenFactory<'a> as TokenFactory<'a> >::From;

pub struct assemblerLexer<'input, Input:CharStream<From<'input> >> {
	base: BaseLexer<'input,assemblerLexerActions,Input,LocalTokenFactory<'input>>,
}

antlr_rust::tid! { impl<'input,Input> TidAble<'input> for assemblerLexer<'input,Input> where Input:CharStream<From<'input> > }

impl<'input, Input:CharStream<From<'input> >> Deref for assemblerLexer<'input,Input>{
	type Target = BaseLexer<'input,assemblerLexerActions,Input,LocalTokenFactory<'input>>;

	fn deref(&self) -> &Self::Target {
		&self.base
	}
}

impl<'input, Input:CharStream<From<'input> >> DerefMut for assemblerLexer<'input,Input>{
	fn deref_mut(&mut self) -> &mut Self::Target {
		&mut self.base
	}
}


impl<'input, Input:CharStream<From<'input> >> assemblerLexer<'input,Input>{
    fn get_rule_names(&self) -> &'static [&'static str] {
        &ruleNames
    }
    fn get_literal_names(&self) -> &[Option<&str>] {
        &_LITERAL_NAMES
    }

    fn get_symbolic_names(&self) -> &[Option<&str>] {
        &_SYMBOLIC_NAMES
    }

    fn get_grammar_file_name(&self) -> &'static str {
        "assemblerLexer.g4"
    }

	pub fn new_with_token_factory(input: Input, tf: &'input LocalTokenFactory<'input>) -> Self {
		antlr_rust::recognizer::check_version("0","3");
    	Self {
			base: BaseLexer::new_base_lexer(
				input,
				LexerATNSimulator::new_lexer_atnsimulator(
					_ATN.clone(),
					_decision_to_DFA.clone(),
					_shared_context_cache.clone(),
				),
				assemblerLexerActions{},
				tf
			)
	    }
	}
}

impl<'input, Input:CharStream<From<'input> >> assemblerLexer<'input,Input> where &'input LocalTokenFactory<'input>:Default{
	pub fn new(input: Input) -> Self{
		assemblerLexer::new_with_token_factory(input, <&LocalTokenFactory<'input> as Default>::default())
	}
}

pub struct assemblerLexerActions {
}

impl assemblerLexerActions{
}

impl<'input, Input:CharStream<From<'input> >> Actions<'input,BaseLexer<'input,assemblerLexerActions,Input,LocalTokenFactory<'input>>> for assemblerLexerActions{
	}

	impl<'input, Input:CharStream<From<'input> >> assemblerLexer<'input,Input>{

}

impl<'input, Input:CharStream<From<'input> >> LexerRecog<'input,BaseLexer<'input,assemblerLexerActions,Input,LocalTokenFactory<'input>>> for assemblerLexerActions{
}
impl<'input> TokenAware<'input> for assemblerLexerActions{
	type TF = LocalTokenFactory<'input>;
}

impl<'input, Input:CharStream<From<'input> >> TokenSource<'input> for assemblerLexer<'input,Input>{
	type TF = LocalTokenFactory<'input>;

    fn next_token(&mut self) -> <Self::TF as TokenFactory<'input>>::Tok {
        self.base.next_token()
    }

    fn get_line(&self) -> isize {
        self.base.get_line()
    }

    fn get_char_position_in_line(&self) -> isize {
        self.base.get_char_position_in_line()
    }

    fn get_input_stream(&mut self) -> Option<&mut dyn IntStream> {
        self.base.get_input_stream()
    }

	fn get_source_name(&self) -> String {
		self.base.get_source_name()
	}

    fn get_token_factory(&self) -> &'input Self::TF {
        self.base.get_token_factory()
    }
}



	lazy_static! {
	    static ref _ATN: Arc<ATN> =
	        Arc::new(ATNDeserializer::new(None).deserialize(_serializedATN.chars()));
	    static ref _decision_to_DFA: Arc<Vec<antlr_rust::RwLock<DFA>>> = {
	        let mut dfa = Vec::new();
	        let size = _ATN.decision_to_state.len();
	        for i in 0..size {
	            dfa.push(DFA::new(
	                _ATN.clone(),
	                _ATN.get_decision_state(i),
	                i as isize,
	            ).into())
	        }
	        Arc::new(dfa)
	    };
	}



	const _serializedATN:&'static str =
		"\x03\u{608b}\u{a72a}\u{8133}\u{b9ed}\u{417c}\u{3be7}\u{7786}\u{5964}\x02\
		\x1f\u{12b}\x08\x01\x04\x02\x09\x02\x04\x03\x09\x03\x04\x04\x09\x04\x04\
		\x05\x09\x05\x04\x06\x09\x06\x04\x07\x09\x07\x04\x08\x09\x08\x04\x09\x09\
		\x09\x04\x0a\x09\x0a\x04\x0b\x09\x0b\x04\x0c\x09\x0c\x04\x0d\x09\x0d\x04\
		\x0e\x09\x0e\x04\x0f\x09\x0f\x04\x10\x09\x10\x04\x11\x09\x11\x04\x12\x09\
		\x12\x04\x13\x09\x13\x04\x14\x09\x14\x04\x15\x09\x15\x04\x16\x09\x16\x04\
		\x17\x09\x17\x04\x18\x09\x18\x04\x19\x09\x19\x04\x1a\x09\x1a\x04\x1b\x09\
		\x1b\x04\x1c\x09\x1c\x04\x1d\x09\x1d\x04\x1e\x09\x1e\x04\x1f\x09\x1f\x04\
		\x20\x09\x20\x04\x21\x09\x21\x04\x22\x09\x22\x04\x23\x09\x23\x04\x24\x09\
		\x24\x04\x25\x09\x25\x04\x26\x09\x26\x04\x27\x09\x27\x04\x28\x09\x28\x04\
		\x29\x09\x29\x04\x2a\x09\x2a\x04\x2b\x09\x2b\x04\x2c\x09\x2c\x04\x2d\x09\
		\x2d\x04\x2e\x09\x2e\x04\x2f\x09\x2f\x04\x30\x09\x30\x04\x31\x09\x31\x04\
		\x32\x09\x32\x04\x33\x09\x33\x04\x34\x09\x34\x04\x35\x09\x35\x04\x36\x09\
		\x36\x04\x37\x09\x37\x04\x38\x09\x38\x03\x02\x03\x02\x03\x03\x03\x03\x03\
		\x04\x03\x04\x03\x05\x03\x05\x03\x06\x03\x06\x03\x07\x03\x07\x03\x08\x03\
		\x08\x03\x09\x03\x09\x03\x0a\x03\x0a\x03\x0b\x03\x0b\x03\x0c\x03\x0c\x03\
		\x0d\x03\x0d\x03\x0e\x03\x0e\x03\x0f\x03\x0f\x03\x10\x03\x10\x03\x11\x03\
		\x11\x03\x12\x03\x12\x03\x13\x03\x13\x03\x14\x03\x14\x03\x15\x03\x15\x03\
		\x16\x03\x16\x03\x17\x03\x17\x03\x18\x03\x18\x03\x19\x03\x19\x03\x1a\x03\
		\x1a\x03\x1b\x03\x1b\x03\x1c\x03\x1c\x03\x1c\x03\x1c\x03\x1d\x03\x1d\x07\
		\x1d\u{ac}\x0a\x1d\x0c\x1d\x0e\x1d\u{af}\x0b\x1d\x03\x1d\x03\x1d\x03\x1e\
		\x03\x1e\x03\x1e\x03\x1e\x07\x1e\u{b7}\x0a\x1e\x0c\x1e\x0e\x1e\u{ba}\x0b\
		\x1e\x03\x1e\x03\x1e\x03\x1f\x03\x1f\x03\x20\x03\x20\x03\x21\x03\x21\x03\
		\x22\x03\x22\x03\x23\x03\x23\x03\x23\x03\x23\x03\x23\x03\x24\x03\x24\x03\
		\x24\x03\x24\x03\x25\x03\x25\x03\x26\x03\x26\x03\x26\x03\x26\x03\x26\x03\
		\x27\x03\x27\x03\x27\x03\x27\x03\x27\x03\x27\x03\x27\x03\x27\x03\x27\x03\
		\x28\x03\x28\x03\x28\x03\x28\x03\x28\x03\x28\x03\x29\x03\x29\x03\x2a\x03\
		\x2a\x03\x2a\x03\x2a\x03\x2b\x03\x2b\x03\x2b\x03\x2b\x03\x2b\x03\x2b\x03\
		\x2c\x03\x2c\x03\x2c\x03\x2d\x03\x2d\x03\x2d\x03\x2d\x03\x2d\x03\x2d\x03\
		\x2d\x03\x2d\x03\x2e\x03\x2e\x03\x2e\x03\x2e\x03\x2e\x03\x2e\x03\x2f\x03\
		\x2f\x03\x30\x03\x30\x03\x31\x03\x31\x03\x31\x03\x31\x03\x32\x03\x32\x03\
		\x33\x03\x33\x03\x34\x05\x34\u{10f}\x0a\x34\x03\x34\x03\x34\x03\x35\x06\
		\x35\u{114}\x0a\x35\x0d\x35\x0e\x35\u{115}\x03\x35\x03\x35\x03\x36\x06\
		\x36\u{11b}\x0a\x36\x0d\x36\x0e\x36\u{11c}\x03\x37\x03\x37\x03\x37\x06\
		\x37\u{122}\x0a\x37\x0d\x37\x0e\x37\u{123}\x03\x38\x03\x38\x06\x38\u{128}\
		\x0a\x38\x0d\x38\x0e\x38\u{129}\x02\x02\x39\x03\x02\x05\x02\x07\x02\x09\
		\x02\x0b\x02\x0d\x02\x0f\x02\x11\x02\x13\x02\x15\x02\x17\x02\x19\x02\x1b\
		\x02\x1d\x02\x1f\x02\x21\x02\x23\x02\x25\x02\x27\x02\x29\x02\x2b\x02\x2d\
		\x02\x2f\x02\x31\x02\x33\x02\x35\x02\x37\x03\x39\x04\x3b\x05\x3d\x06\x3f\
		\x07\x41\x08\x43\x09\x45\x0a\x47\x0b\x49\x0c\x4b\x0d\x4d\x0e\x4f\x0f\x51\
		\x10\x53\x11\x55\x12\x57\x13\x59\x14\x5b\x15\x5d\x16\x5f\x17\x61\x18\x63\
		\x19\x65\x1a\x67\x1b\x69\x1c\x6b\x1d\x6d\x1e\x6f\x1f\x03\x02\x23\x04\x02\
		\x43\x43\x63\x63\x04\x02\x44\x44\x64\x64\x04\x02\x45\x45\x65\x65\x04\x02\
		\x46\x46\x66\x66\x04\x02\x47\x47\x67\x67\x04\x02\x48\x48\x68\x68\x04\x02\
		\x49\x49\x69\x69\x04\x02\x4a\x4a\x6a\x6a\x04\x02\x4b\x4b\x6b\x6b\x04\x02\
		\x4c\x4c\x6c\x6c\x04\x02\x4d\x4d\x6d\x6d\x04\x02\x4e\x4e\x6e\x6e\x04\x02\
		\x4f\x4f\x6f\x6f\x04\x02\x50\x50\x70\x70\x04\x02\x51\x51\x71\x71\x04\x02\
		\x52\x52\x72\x72\x04\x02\x53\x53\x73\x73\x04\x02\x54\x54\x74\x74\x04\x02\
		\x55\x55\x75\x75\x04\x02\x56\x56\x76\x76\x04\x02\x57\x57\x77\x77\x04\x02\
		\x58\x58\x78\x78\x04\x02\x59\x59\x79\x79\x04\x02\x5a\x5a\x7a\x7a\x04\x02\
		\x5b\x5b\x7b\x7b\x04\x02\x5c\x5c\x7c\x7c\x04\x02\x0c\x0c\x0f\x0f\x03\x02\
		\x24\x24\x05\x02\x0b\x0c\x0e\x0f\x22\x22\x03\x02\x32\x3b\x05\x02\x32\x3b\
		\x43\x48\x63\x68\x04\x02\x43\x5c\x63\x7c\x06\x02\x32\x3b\x43\x5c\x61\x61\
		\x63\x7c\x02\u{118}\x02\x37\x03\x02\x02\x02\x02\x39\x03\x02\x02\x02\x02\
		\x3b\x03\x02\x02\x02\x02\x3d\x03\x02\x02\x02\x02\x3f\x03\x02\x02\x02\x02\
		\x41\x03\x02\x02\x02\x02\x43\x03\x02\x02\x02\x02\x45\x03\x02\x02\x02\x02\
		\x47\x03\x02\x02\x02\x02\x49\x03\x02\x02\x02\x02\x4b\x03\x02\x02\x02\x02\
		\x4d\x03\x02\x02\x02\x02\x4f\x03\x02\x02\x02\x02\x51\x03\x02\x02\x02\x02\
		\x53\x03\x02\x02\x02\x02\x55\x03\x02\x02\x02\x02\x57\x03\x02\x02\x02\x02\
		\x59\x03\x02\x02\x02\x02\x5b\x03\x02\x02\x02\x02\x5d\x03\x02\x02\x02\x02\
		\x5f\x03\x02\x02\x02\x02\x61\x03\x02\x02\x02\x02\x63\x03\x02\x02\x02\x02\
		\x65\x03\x02\x02\x02\x02\x67\x03\x02\x02\x02\x02\x69\x03\x02\x02\x02\x02\
		\x6b\x03\x02\x02\x02\x02\x6d\x03\x02\x02\x02\x02\x6f\x03\x02\x02\x02\x03\
		\x71\x03\x02\x02\x02\x05\x73\x03\x02\x02\x02\x07\x75\x03\x02\x02\x02\x09\
		\x77\x03\x02\x02\x02\x0b\x79\x03\x02\x02\x02\x0d\x7b\x03\x02\x02\x02\x0f\
		\x7d\x03\x02\x02\x02\x11\x7f\x03\x02\x02\x02\x13\u{81}\x03\x02\x02\x02\
		\x15\u{83}\x03\x02\x02\x02\x17\u{85}\x03\x02\x02\x02\x19\u{87}\x03\x02\
		\x02\x02\x1b\u{89}\x03\x02\x02\x02\x1d\u{8b}\x03\x02\x02\x02\x1f\u{8d}\
		\x03\x02\x02\x02\x21\u{8f}\x03\x02\x02\x02\x23\u{91}\x03\x02\x02\x02\x25\
		\u{93}\x03\x02\x02\x02\x27\u{95}\x03\x02\x02\x02\x29\u{97}\x03\x02\x02\
		\x02\x2b\u{99}\x03\x02\x02\x02\x2d\u{9b}\x03\x02\x02\x02\x2f\u{9d}\x03\
		\x02\x02\x02\x31\u{9f}\x03\x02\x02\x02\x33\u{a1}\x03\x02\x02\x02\x35\u{a3}\
		\x03\x02\x02\x02\x37\u{a5}\x03\x02\x02\x02\x39\u{a9}\x03\x02\x02\x02\x3b\
		\u{b2}\x03\x02\x02\x02\x3d\u{bd}\x03\x02\x02\x02\x3f\u{bf}\x03\x02\x02\
		\x02\x41\u{c1}\x03\x02\x02\x02\x43\u{c3}\x03\x02\x02\x02\x45\u{c5}\x03\
		\x02\x02\x02\x47\u{ca}\x03\x02\x02\x02\x49\u{ce}\x03\x02\x02\x02\x4b\u{d0}\
		\x03\x02\x02\x02\x4d\u{d5}\x03\x02\x02\x02\x4f\u{de}\x03\x02\x02\x02\x51\
		\u{e4}\x03\x02\x02\x02\x53\u{e6}\x03\x02\x02\x02\x55\u{ea}\x03\x02\x02\
		\x02\x57\u{f0}\x03\x02\x02\x02\x59\u{f3}\x03\x02\x02\x02\x5b\u{fb}\x03\
		\x02\x02\x02\x5d\u{101}\x03\x02\x02\x02\x5f\u{103}\x03\x02\x02\x02\x61\
		\u{105}\x03\x02\x02\x02\x63\u{109}\x03\x02\x02\x02\x65\u{10b}\x03\x02\x02\
		\x02\x67\u{10e}\x03\x02\x02\x02\x69\u{113}\x03\x02\x02\x02\x6b\u{11a}\x03\
		\x02\x02\x02\x6d\u{11e}\x03\x02\x02\x02\x6f\u{125}\x03\x02\x02\x02\x71\
		\x72\x09\x02\x02\x02\x72\x04\x03\x02\x02\x02\x73\x74\x09\x03\x02\x02\x74\
		\x06\x03\x02\x02\x02\x75\x76\x09\x04\x02\x02\x76\x08\x03\x02\x02\x02\x77\
		\x78\x09\x05\x02\x02\x78\x0a\x03\x02\x02\x02\x79\x7a\x09\x06\x02\x02\x7a\
		\x0c\x03\x02\x02\x02\x7b\x7c\x09\x07\x02\x02\x7c\x0e\x03\x02\x02\x02\x7d\
		\x7e\x09\x08\x02\x02\x7e\x10\x03\x02\x02\x02\x7f\u{80}\x09\x09\x02\x02\
		\u{80}\x12\x03\x02\x02\x02\u{81}\u{82}\x09\x0a\x02\x02\u{82}\x14\x03\x02\
		\x02\x02\u{83}\u{84}\x09\x0b\x02\x02\u{84}\x16\x03\x02\x02\x02\u{85}\u{86}\
		\x09\x0c\x02\x02\u{86}\x18\x03\x02\x02\x02\u{87}\u{88}\x09\x0d\x02\x02\
		\u{88}\x1a\x03\x02\x02\x02\u{89}\u{8a}\x09\x0e\x02\x02\u{8a}\x1c\x03\x02\
		\x02\x02\u{8b}\u{8c}\x09\x0f\x02\x02\u{8c}\x1e\x03\x02\x02\x02\u{8d}\u{8e}\
		\x09\x10\x02\x02\u{8e}\x20\x03\x02\x02\x02\u{8f}\u{90}\x09\x11\x02\x02\
		\u{90}\x22\x03\x02\x02\x02\u{91}\u{92}\x09\x12\x02\x02\u{92}\x24\x03\x02\
		\x02\x02\u{93}\u{94}\x09\x13\x02\x02\u{94}\x26\x03\x02\x02\x02\u{95}\u{96}\
		\x09\x14\x02\x02\u{96}\x28\x03\x02\x02\x02\u{97}\u{98}\x09\x15\x02\x02\
		\u{98}\x2a\x03\x02\x02\x02\u{99}\u{9a}\x09\x16\x02\x02\u{9a}\x2c\x03\x02\
		\x02\x02\u{9b}\u{9c}\x09\x17\x02\x02\u{9c}\x2e\x03\x02\x02\x02\u{9d}\u{9e}\
		\x09\x18\x02\x02\u{9e}\x30\x03\x02\x02\x02\u{9f}\u{a0}\x09\x19\x02\x02\
		\u{a0}\x32\x03\x02\x02\x02\u{a1}\u{a2}\x09\x1a\x02\x02\u{a2}\x34\x03\x02\
		\x02\x02\u{a3}\u{a4}\x09\x1b\x02\x02\u{a4}\x36\x03\x02\x02\x02\u{a5}\u{a6}\
		\x05\x19\x0d\x02\u{a6}\u{a7}\x05\x09\x05\x02\u{a7}\u{a8}\x05\x13\x0a\x02\
		\u{a8}\x38\x03\x02\x02\x02\u{a9}\u{ad}\x07\x3d\x02\x02\u{aa}\u{ac}\x0a\
		\x1c\x02\x02\u{ab}\u{aa}\x03\x02\x02\x02\u{ac}\u{af}\x03\x02\x02\x02\u{ad}\
		\u{ab}\x03\x02\x02\x02\u{ad}\u{ae}\x03\x02\x02\x02\u{ae}\u{b0}\x03\x02\
		\x02\x02\u{af}\u{ad}\x03\x02\x02\x02\u{b0}\u{b1}\x08\x1d\x02\x02\u{b1}\
		\x3a\x03\x02\x02\x02\u{b2}\u{b8}\x07\x24\x02\x02\u{b3}\u{b4}\x07\x24\x02\
		\x02\u{b4}\u{b7}\x07\x24\x02\x02\u{b5}\u{b7}\x0a\x1d\x02\x02\u{b6}\u{b3}\
		\x03\x02\x02\x02\u{b6}\u{b5}\x03\x02\x02\x02\u{b7}\u{ba}\x03\x02\x02\x02\
		\u{b8}\u{b6}\x03\x02\x02\x02\u{b8}\u{b9}\x03\x02\x02\x02\u{b9}\u{bb}\x03\
		\x02\x02\x02\u{ba}\u{b8}\x03\x02\x02\x02\u{bb}\u{bc}\x07\x24\x02\x02\u{bc}\
		\x3c\x03\x02\x02\x02\u{bd}\u{be}\x07\x2c\x02\x02\u{be}\x3e\x03\x02\x02\
		\x02\u{bf}\u{c0}\x07\x2b\x02\x02\u{c0}\x40\x03\x02\x02\x02\u{c1}\u{c2}\
		\x07\x3c\x02\x02\u{c2}\x42\x03\x02\x02\x02\u{c3}\u{c4}\x07\x2e\x02\x02\
		\u{c4}\x44\x03\x02\x02\x02\u{c5}\u{c6}\x07\x65\x02\x02\u{c6}\u{c7}\x07\
		\x75\x02\x02\u{c7}\u{c8}\x07\x67\x02\x02\u{c8}\u{c9}\x07\x69\x02\x02\u{c9}\
		\x46\x03\x02\x02\x02\u{ca}\u{cb}\x07\x66\x02\x02\u{cb}\u{cc}\x07\x67\x02\
		\x02\u{cc}\u{cd}\x07\x68\x02\x02\u{cd}\x48\x03\x02\x02\x02\u{ce}\u{cf}\
		\x07\x30\x02\x02\u{cf}\x4a\x03\x02\x02\x02\u{d0}\u{d1}\x07\x67\x02\x02\
		\u{d1}\u{d2}\x07\x6e\x02\x02\u{d2}\u{d3}\x07\x75\x02\x02\u{d3}\u{d4}\x07\
		\x67\x02\x02\u{d4}\x4c\x03\x02\x02\x02\u{d5}\u{d6}\x07\x67\x02\x02\u{d6}\
		\u{d7}\x07\x70\x02\x02\u{d7}\u{d8}\x07\x66\x02\x02\u{d8}\u{d9}\x07\x6f\
		\x02\x02\u{d9}\u{da}\x07\x63\x02\x02\u{da}\u{db}\x07\x65\x02\x02\u{db}\
		\u{dc}\x07\x74\x02\x02\u{dc}\u{dd}\x07\x71\x02\x02\u{dd}\x4e\x03\x02\x02\
		\x02\u{de}\u{df}\x07\x67\x02\x02\u{df}\u{e0}\x07\x70\x02\x02\u{e0}\u{e1}\
		\x07\x66\x02\x02\u{e1}\u{e2}\x07\x6b\x02\x02\u{e2}\u{e3}\x07\x68\x02\x02\
		\u{e3}\x50\x03\x02\x02\x02\u{e4}\u{e5}\x07\x3f\x02\x02\u{e5}\x52\x03\x02\
		\x02\x02\u{e6}\u{e7}\x07\x67\x02\x02\u{e7}\u{e8}\x07\x73\x02\x02\u{e8}\
		\u{e9}\x07\x77\x02\x02\u{e9}\x54\x03\x02\x02\x02\u{ea}\u{eb}\x07\x67\x02\
		\x02\u{eb}\u{ec}\x07\x74\x02\x02\u{ec}\u{ed}\x07\x74\x02\x02\u{ed}\u{ee}\
		\x07\x71\x02\x02\u{ee}\u{ef}\x07\x74\x02\x02\u{ef}\x56\x03\x02\x02\x02\
		\u{f0}\u{f1}\x07\x6b\x02\x02\u{f1}\u{f2}\x07\x68\x02\x02\u{f2}\x58\x03\
		\x02\x02\x02\u{f3}\u{f4}\x07\x6b\x02\x02\u{f4}\u{f5}\x07\x70\x02\x02\u{f5}\
		\u{f6}\x07\x65\x02\x02\u{f6}\u{f7}\x07\x6e\x02\x02\u{f7}\u{f8}\x07\x77\
		\x02\x02\u{f8}\u{f9}\x07\x66\x02\x02\u{f9}\u{fa}\x07\x67\x02\x02\u{fa}\
		\x5a\x03\x02\x02\x02\u{fb}\u{fc}\x07\x6f\x02\x02\u{fc}\u{fd}\x07\x63\x02\
		\x02\u{fd}\u{fe}\x07\x65\x02\x02\u{fe}\u{ff}\x07\x74\x02\x02\u{ff}\u{100}\
		\x07\x71\x02\x02\u{100}\x5c\x03\x02\x02\x02\u{101}\u{102}\x07\x2f\x02\x02\
		\u{102}\x5e\x03\x02\x02\x02\u{103}\u{104}\x07\x2a\x02\x02\u{104}\x60\x03\
		\x02\x02\x02\u{105}\u{106}\x07\x71\x02\x02\u{106}\u{107}\x07\x74\x02\x02\
		\u{107}\u{108}\x07\x69\x02\x02\u{108}\x62\x03\x02\x02\x02\u{109}\u{10a}\
		\x07\x2d\x02\x02\u{10a}\x64\x03\x02\x02\x02\u{10b}\u{10c}\x07\x31\x02\x02\
		\u{10c}\x66\x03\x02\x02\x02\u{10d}\u{10f}\x07\x0f\x02\x02\u{10e}\u{10d}\
		\x03\x02\x02\x02\u{10e}\u{10f}\x03\x02\x02\x02\u{10f}\u{110}\x03\x02\x02\
		\x02\u{110}\u{111}\x07\x0c\x02\x02\u{111}\x68\x03\x02\x02\x02\u{112}\u{114}\
		\x09\x1e\x02\x02\u{113}\u{112}\x03\x02\x02\x02\u{114}\u{115}\x03\x02\x02\
		\x02\u{115}\u{113}\x03\x02\x02\x02\u{115}\u{116}\x03\x02\x02\x02\u{116}\
		\u{117}\x03\x02\x02\x02\u{117}\u{118}\x08\x35\x02\x02\u{118}\x6a\x03\x02\
		\x02\x02\u{119}\u{11b}\x09\x1f\x02\x02\u{11a}\u{119}\x03\x02\x02\x02\u{11b}\
		\u{11c}\x03\x02\x02\x02\u{11c}\u{11a}\x03\x02\x02\x02\u{11c}\u{11d}\x03\
		\x02\x02\x02\u{11d}\x6c\x03\x02\x02\x02\u{11e}\u{11f}\x07\x32\x02\x02\u{11f}\
		\u{121}\x07\x7a\x02\x02\u{120}\u{122}\x09\x20\x02\x02\u{121}\u{120}\x03\
		\x02\x02\x02\u{122}\u{123}\x03\x02\x02\x02\u{123}\u{121}\x03\x02\x02\x02\
		\u{123}\u{124}\x03\x02\x02\x02\u{124}\x6e\x03\x02\x02\x02\u{125}\u{127}\
		\x09\x21\x02\x02\u{126}\u{128}\x09\x22\x02\x02\u{127}\u{126}\x03\x02\x02\
		\x02\u{128}\u{129}\x03\x02\x02\x02\u{129}\u{127}\x03\x02\x02\x02\u{129}\
		\u{12a}\x03\x02\x02\x02\u{12a}\x70\x03\x02\x02\x02\x0b\x02\u{ad}\u{b6}\
		\u{b8}\u{10e}\u{115}\u{11c}\u{123}\u{129}\x03\x02\x03\x02";
